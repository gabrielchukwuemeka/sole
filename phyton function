{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOCD22iIt4S218W2vF6pO1Z",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/gabrielchukwuemeka/sole/blob/main/phyton%20function\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N9qHkBrxJsaO"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "functions that the returns the number of letters in a word"
      ],
      "metadata": {
        "id": "amTx9ReJJ4-1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "IZt0GqgGKEvl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def count_letters(word):\n",
        "    # Remove any non-letter characters and return the length\n",
        "    return len([char for char in word if char.isalpha()])\n",
        "\n",
        "# Example usage\n",
        "word = \"hello\"\n",
        "print(count_letters(word))  # Output: 5\n"
      ],
      "metadata": {
        "id": "myycJaoXKJXj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        " This function uses a list comprehension to remove any non-letter characters from the word and then returns the length of the filtered list. If you only need to count the alphabetic characters in a string (ignoring spaces, punctuation, etc.), this approach will work well."
      ],
      "metadata": {
        "id": "Z-UDpF4RKhZ6"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "YlrsdX4RKATn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "functions that take firstname and lastname and return fullname"
      ],
      "metadata": {
        "id": "-noQRHTPKxs9"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3QEP34oTLGpM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_full_name(first_name, last_name):\n",
        "    full_name = f\"{first_name} {last_name}\"\n",
        "    return full_name\n",
        "\n",
        "# Example usage:\n",
        "first_name = \"John\"\n",
        "last_name = \"Doe\"\n",
        "print(get_full_name(first_name, last_name))  # Output: John Doe\n",
        "\n"
      ],
      "metadata": {
        "id": "XvLG1CJxLJAH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This function uses an f-string to concatenate the first and last names with a space in between. You can call this function with any first and last name to get the full name"
      ],
      "metadata": {
        "id": "adZM6EvDLMpf"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "SdbotXKJLbN3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "function that calculates the interest on a loan with rate = 4%"
      ],
      "metadata": {
        "id": "FaqnVQhxLeLN"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "OjGwNyhPLlHm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "principal_amount = 1000  # principal amount in dollars\n",
        "time_period = 2  # time period in years\n",
        "\n",
        "interest = calculate_interest(principal_amount, time_period)\n",
        "print(f\"The interest on the loan is: ${interest}\")\n"
      ],
      "metadata": {
        "id": "ovonQbthLmTa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Certainly! To calculate the interest on a loan, you can use the formula:\n",
        "\n",
        "Interest\n",
        "=\n",
        "Principal\n",
        "×\n",
        "Rate\n",
        "×\n",
        "Time\n",
        "Interest=Principal×Rate×Time\n",
        "\n",
        "where:\n",
        "\n",
        "Principal is the initial amount of the loan.\n",
        "Rate is the interest rate (expressed as a decimal).\n",
        "Time is the duration for which the interest is calculated (in years)."
      ],
      "metadata": {
        "id": "Xl6buz23MDKW"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "FTURAjE8MV-B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "function that returns the area of a rectangle"
      ],
      "metadata": {
        "id": "wY1vptelMdQ9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def rectangle_area(length, width):\n",
        "    \"\"\"\n",
        "    Calculate the area of a rectangle.\n",
        "\n",
        "    Parameters:\n",
        "    length (float): The length of the rectangle.\n",
        "    width (float): The width of the rectangle.\n",
        "\n",
        "    Returns:\n",
        "    float: The area of the rectangle.\n",
        "    \"\"\"\n",
        "    return length * width\n",
        "\n",
        "# Example usage:\n",
        "length = 6\n",
        "width = 4\n",
        "area = rectangle_area(length, width)\n",
        "print(f\"The area of the rectangle is: {area}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5m06f4RxMlQa",
        "outputId": "41dbffa4-da84-40ce-ae52-be5282b612b3"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The area of the rectangle is: 24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Pu3g52YkMmzb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This function takes two parameters, length and width, multiplies them, and returns the result, which is the area of the rectangle. You can call this function with the length and width of the rectangle to get the area"
      ],
      "metadata": {
        "id": "ReaBup5ZNLPa"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "1SfaTWvwNOUc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "function that checks whether someone is due for retirement or not (age_ret = 65"
      ],
      "metadata": {
        "id": "MD7SeK33NUQK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def check_retirement(age, age_ret=65):\n",
        "    \"\"\"\n",
        "    Check whether someone is due for retirement.\n",
        "\n",
        "    Parameters:\n",
        "    age (int): The current age of the person.\n",
        "    age_ret (int): The retirement age, default is 65.\n",
        "\n",
        "    Returns:\n",
        "    bool: True if the person is due for retirement, False otherwise.\n",
        "    \"\"\"\n",
        "    if age >= age_ret:\n",
        "        return True\n",
        "    else:\n",
        "        return False\n",
        "\n",
        "# Example usage\n",
        "age = 60\n",
        "if check_retirement(age):\n",
        "    print(\"The person is due for retirement.\")\n",
        "else:\n",
        "    print(\"The person is not due for retirement.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uc0LlqplNVzb",
        "outputId": "b0b5f36a-09f2-43ff-8277-ada6e459ea2b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The person is not due for retirement.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "E5w1mlkINvZM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "fkKDNS_cOJiF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "This function takes two parameters: age, which is the current age of the person, and age_ret, which is the retirement age (default is 65). It returns True if the person is due for retirement (i.e., their age is greater than or equal to 65), and False otherwise"
      ],
      "metadata": {
        "id": "UE__Zk5HOJlM"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ibVQpDAeOMkR"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}